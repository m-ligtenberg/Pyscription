name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 pyscription --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 pyscription --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff pyscription/
    
    - name: Type checking with mypy
      run: |
        mypy pyscription/ --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        bandit -r pyscription/ -f json -o bandit-report.json || true
        
    - name: Test with pytest
      run: |
        pytest tests/ --cov=pyscription --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r pyscription/ -f json -o bandit-security-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-security-report.json

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install Pyscription
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test CLI functionality
      run: |
        python -m pyscription --help
        echo "def test(): pass" > test_file.py
        python -m pyscription --analyze test_file.py
    
    - name: Test security analysis
      run: |
        cat > vulnerable.py << 'EOF'
        password = "secret123"
        import os
        os.system("rm " + user_input)
        EOF
        python -c "
        from pyscription.core.security_analyzer import SecurityPatternAnalyzer
        with open('vulnerable.py', 'r') as f:
            code = f.read()
        analyzer = SecurityPatternAnalyzer()
        issues = analyzer.analyze_code_security(code)
        assert len(issues) > 0, 'Security analysis should detect issues'
        print(f'✅ Detected {len(issues)} security issues')
        "

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install memory-profiler
    
    - name: Performance benchmarks
      run: |
        python -c "
        import time
        from pyscription.core.mentor import MLEnhancedPyscription
        
        # Test startup time
        start = time.time()
        mentor = MLEnhancedPyscription()
        startup_time = time.time() - start
        
        print(f'Startup time: {startup_time:.2f}s')
        assert startup_time < 5.0, f'Startup too slow: {startup_time:.2f}s'
        
        # Test analysis performance
        code = 'def test(): pass\n' * 100
        start = time.time()
        analysis = mentor.analyze_with_ml(code)
        analysis_time = time.time() - start
        
        print(f'Analysis time for 100 functions: {analysis_time:.2f}s')
        assert analysis_time < 2.0, f'Analysis too slow: {analysis_time:.2f}s'
        
        print('✅ Performance tests passed')
        "

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [test, security-scan, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/